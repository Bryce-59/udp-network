#!/usr/bin/env python3 

# TODO: Why is time.sleep so SLOW?

import random
from packet import *
import socket
from socket import *
import sys
import threading
from threading import *
import time

class FSA(IntEnum):
    HELLO = 0
    HELLO_WAIT = 1
    READY = 2
    READY_TIME = 3
    CLOSING = 4
    CLOSED = 5

clientSocket = socket(AF_INET, SOCK_DGRAM)
shutdown_time = threading.Event()

serverName = None
serverPort = None
SESSION_ID = random.randint(0x00000000, 0xFFFFFFFF)
FSA = FSA.HELLO
seq_num = 0

rcv_goodbye = False
alive_rcv = False

'''
Helper function that sends a command to the specified server
'''
def send(command, data=None):
    global seq_num
    packet = wrap_packet(command, seq_num, SESSION_ID, data)
    clientSocket.sendto(packet,(serverName, serverPort))
    seq_num += 1


'''
Corner cases -
    Ignore   | packet < 12 bytes (not P0P packet)
    Ignore   | magic != MAGIC or version != VERSION
    
    Goodbye  | server sends incorrect session id
    Goodbye  | no FSA (i.e. not expected command and not GOODBYE)
'''
def request(expected):
    while True:
        packet, serverAddress = clientSocket.recvfrom(2048)
        if len(packet) >= MIN_SIZE:
            magic, version, command, sequence, rcv_id, data = unwrap_packet(packet)
            if magic == MAGIC and version == VERSION: 
                if SESSION_ID != rcv_id:
                    return False
        
                if (command == expected):
                    return True
                elif (command == Command.GOODBYE):
                    print('closing client')
                    global rcv_goodbye
                    rcv_goodbye = True
                return False

'''
Start the code
'''
def open_client():
    timer = Thread(target=timer_goodbye, daemon=True)
    timer.start()
    send(Command.HELLO, None)
    
    hello = request(Command.HELLO)
    if hello:
        global alive_rcv
        alive_rcv = True

        # Start the main running threads
        t1 = Thread(target=handle_socket, daemon=True)
        t2 = Thread(target=handle_keyboard, daemon=True)
        t1.start()
        t2.start()
    else:
        shutdown_time.set()

'''
End the code
'''
def close_client():
    try:
        clientSocket.shutdown(SHUT_WR)
    except:
        pass
    clientSocket.close()


def timer_goodbye():
    timeout = 5
    cycles = 1000
    
    i = 0
    while i < timeout * cycles / 5: # way too slow, using a magic number
        time.sleep(timeout / cycles)
        if (alive_rcv):
            i = 0
        else:
            i += 1
    
    if (shutdown_time.is_set()):
        close_client()
    else:
        shutdown_time.set()

'''
The main input loop
'''
def handle_keyboard():
    while True:
        data = sys.stdin.readline()
        if (not data or (data == "q\n" and sys.stdin.isatty())):
            send(Command.GOODBYE, None)
            break
        else:
            send(Command.DATA, data.encode('UTF-8'))
            global alive_rcv #
            alive_rcv = False #
    
    shutdown_time.set()

'''
The main socket loop
'''
def handle_socket():
    while True:
        alive = request(Command.ALIVE)
        
        if alive:
            global alive_rcv #
            alive_rcv = True #
        else:
            break
    
    shutdown_time.set()

if __name__ == '__main__':
    serverName = sys.argv[1]
    serverPort = int(sys.argv[2])
    session_id = random.randint(0x00000000, 0xFFFFFFFF)
    
    # Start (HELLO_WAIT, READY/READY_TIME)
    t_start = Thread(target=open_client, daemon=True)
    t_start.start()
    
    shutdown_time.wait()
    
    if not rcv_goodbye:
        # CLOSING
        send(Command.GOODBYE, None) 
        timer = Thread(target=timer_goodbye, daemon=True)
        timer.start()
        
        goodbye = request(Command.GOODBYE)
    
    #CLOSED
    close_client()
